const cron = require('node-cron');
const { logger } = require('../utils/helpers');
const NotificationService = require('../services/notification.service');
const AuthService = require('../services/auth.service');
const db = require('../config/database');

class CleanupJobs {
  // Nettoyer les anciennes notifications (tous les jours √† 2h du matin)
  static scheduleNotificationCleanup() {
    cron.schedule('0 2 * * *', async () => {
      try {
        logger.info('üßπ D√©but du nettoyage des notifications...');
        
        const result = await NotificationService.deleteOldNotifications(30);
        
        logger.info(`Nettoyage notifications termin√©: ${result.deleted_count} notifications supprim√©es`);
      } catch (error) {
        logger.error('Erreur lors du nettoyage des notifications:', error);
      }
    });
  }

  // Nettoyer les sessions expir√©es (toutes les 6 heures)
  static scheduleSessionCleanup() {
    cron.schedule('0 */6 * * *', async () => {
      try {
        logger.info('üßπ D√©but du nettoyage des sessions...');
        
        const query = 'DELETE FROM user_sessions WHERE expires_at < NOW()';
        const result = await db.query(query);
        
        logger.info(`‚úÖ Nettoyage sessions termin√©: ${result.affectedRows || 0} sessions supprim√©es`);
      } catch (error) {
        logger.error('‚ùå Erreur lors du nettoyage des sessions:', error);
      }
    });
  }

  // Nettoyer les tokens expir√©s (tous les jours √† 3h du matin)
  static scheduleTokenCleanup() {
    cron.schedule('0 3 * * *', async () => {
      try {
        logger.info('üßπ D√©but du nettoyage des tokens...');
        
        // Nettoyer les refresh tokens expir√©s
        const refreshQuery = 'DELETE FROM refresh_tokens WHERE expires_at < NOW()';
        const refreshResult = await db.query(refreshQuery);
        
        // Nettoyer les tokens de r√©initialisation expir√©s
        const resetQuery = 'UPDATE users SET reset_token = NULL, reset_token_expires = NULL WHERE reset_token_expires < NOW()';
        const resetResult = await db.query(resetQuery);
        
        // Nettoyer les tokens de v√©rification expir√©s
        const verifyQuery = 'UPDATE users SET verification_token = NULL WHERE verification_token_expires < NOW()';
        const verifyResult = await db.query(verifyQuery);
        
        logger.info(`‚úÖ Nettoyage tokens termin√©: ${refreshResult.affectedRows || 0} refresh tokens, ${resetResult.affectedRows || 0} reset tokens, ${verifyResult.affectedRows || 0} verification tokens supprim√©s`);
      } catch (error) {
        logger.error('‚ùå Erreur lors du nettoyage des tokens:', error);
      }
    });
  }

  // Nettoyer les fichiers temporaires (tous les jours √† 4h du matin)
  static scheduleFileCleanup() {
    cron.schedule('0 4 * * *', async () => {
      try {
        logger.info('üßπ D√©but du nettoyage des fichiers temporaires...');
        
        const fs = require('fs').promises;
        const path = require('path');
        
        const tempPaths = [
          path.join(process.cwd(), 'uploads/temp'),
          path.join(process.cwd(), 'uploads/temp/imports'),
          path.join(process.cwd(), 'uploads/temp/exports')
        ];
        
        let deletedCount = 0;
        
        for (const tempPath of tempPaths) {
          try {
            const files = await fs.readdir(tempPath);
            
            for (const file of files) {
              const filePath = path.join(tempPath, file);
              const stats = await fs.stat(filePath);
              
              // Supprimer les fichiers de plus de 24 heures
              const hoursDiff = (Date.now() - stats.mtime.getTime()) / (1000 * 60 * 60);
              
              if (hoursDiff > 24) {
                await fs.unlink(filePath);
                deletedCount++;
              }
            }
          } catch (error) {
            // Ignorer les erreurs de dossiers inexistants
            if (error.code !== 'ENOENT') {
              logger.error(`Erreur nettoyage dossier ${tempPath}:`, error);
            }
          }
        }
        
        logger.info(`‚úÖ Nettoyage fichiers termin√©: ${deletedCount} fichiers supprim√©s`);
      } catch (error) {
        logger.error('‚ùå Erreur lors du nettoyage des fichiers:', error);
      }
    });
  }

  // Nettoyer les logs anciens (toutes les semaines le dimanche √† 5h)
  static scheduleLogCleanup() {
    cron.schedule('0 5 * * 0', async () => {
      try {
        logger.info('üßπ D√©but du nettoyage des logs...');
        
        const query = 'DELETE FROM system_logs WHERE created_at < DATE_SUB(NOW(), INTERVAL 90 DAY)';
        const result = await db.query(query);
        
        logger.info(`‚úÖ Nettoyage logs termin√©: ${result.affectedRows || 0} entr√©es supprim√©es`);
      } catch (error) {
        logger.error('‚ùå Erreur lors du nettoyage des logs:', error);
      }
    });
  }

  // Nettoyer les donn√©es d'audit anciennes (tous les mois le 1er √† 6h)
  static scheduleAuditCleanup() {
    cron.schedule('0 6 1 * *', async () => {
      try {
        logger.info('üßπ D√©but du nettoyage des donn√©es d\'audit...');
        
        const query = 'DELETE FROM audit_logs WHERE created_at < DATE_SUB(NOW(), INTERVAL 1 YEAR)';
        const result = await db.query(query);
        
        logger.info(`‚úÖ Nettoyage audit termin√©: ${result.affectedRows || 0} entr√©es supprim√©es`);
      } catch (error) {
        logger.error('‚ùå Erreur lors du nettoyage de l\'audit:', error);
      }
    });
  }

  // Optimiser la base de donn√©es (toutes les semaines le dimanche √† 6h)
  static scheduleDatabaseOptimization() {
    cron.schedule('0 6 * * 0', async () => {
      try {
        logger.info('üîß D√©but de l\'optimisation de la base de donn√©es...');
        
        const tables = [
          'users', 'books', 'loans', 'reviews', 'notifications',
          'user_sessions', 'refresh_tokens', 'system_logs', 'audit_logs'
        ];
        
        for (const table of tables) {
          try {
            await db.query(`OPTIMIZE TABLE ${table}`);
            logger.info(`‚úÖ Table ${table} optimis√©e`);
          } catch (error) {
            logger.error(`‚ùå Erreur optimisation table ${table}:`, error);
          }
        }
        
        logger.info('‚úÖ Optimisation de la base de donn√©es termin√©e');
      } catch (error) {
        logger.error('‚ùå Erreur lors de l\'optimisation de la base de donn√©es:', error);
      }
    });
  }

  // Analyser les statistiques d'utilisation des tables (tous les jours √† 7h)
  static scheduleTableAnalysis() {
    cron.schedule('0 7 * * *', async () => {
      try {
        logger.info('üìä D√©but de l\'analyse des tables...');
        
        const tables = [
          'users', 'books', 'loans', 'reviews', 'notifications'
        ];
        
        for (const table of tables) {
          try {
            await db.query(`ANALYZE TABLE ${table}`);
          } catch (error) {
            logger.error(`‚ùå Erreur analyse table ${table}:`, error);
          }
        }
        
        logger.info('‚úÖ Analyse des tables termin√©e');
      } catch (error) {
        logger.error('‚ùå Erreur lors de l\'analyse des tables:', error);
      }
    });
  }

  // D√©marrer toutes les t√¢ches de nettoyage
  static startAllCleanupJobs() {
    logger.info('üöÄ D√©marrage des t√¢ches de nettoyage programm√©es...');
    
    this.scheduleNotificationCleanup();
    this.scheduleSessionCleanup();
    this.scheduleTokenCleanup();
    this.scheduleFileCleanup();
    this.scheduleLogCleanup();
    this.scheduleAuditCleanup();
    this.scheduleDatabaseOptimization();
    this.scheduleTableAnalysis();
    
    logger.info('‚úÖ Toutes les t√¢ches de nettoyage sont programm√©es');
  }

  // Ex√©cuter le nettoyage manuellement
  static async runManualCleanup(options = {}) {
    const {
      notifications = true,
      sessions = true,
      tokens = true,
      files = true,
      logs = false,
      audit = false,
      optimize = false
    } = options;

    logger.info('üßπ D√©but du nettoyage manuel...');

    try {
      if (notifications) {
        const result = await NotificationService.deleteOldNotifications(30);
        logger.info(`‚úÖ ${result.deleted_count} notifications supprim√©es`);
      }

      if (sessions) {
        const query = 'DELETE FROM user_sessions WHERE expires_at < NOW()';
        const result = await db.query(query);
        logger.info(`‚úÖ ${result.affectedRows || 0} sessions supprim√©es`);
      }

      if (tokens) {
        const refreshQuery = 'DELETE FROM refresh_tokens WHERE expires_at < NOW()';
        const refreshResult = await db.query(refreshQuery);
        
        const resetQuery = 'UPDATE users SET reset_token = NULL, reset_token_expires = NULL WHERE reset_token_expires < NOW()';
        const resetResult = await db.query(resetQuery);
        
        logger.info(`‚úÖ ${refreshResult.affectedRows || 0} refresh tokens et ${resetResult.affectedRows || 0} reset tokens supprim√©s`);
      }

      if (files) {
        // Code de nettoyage des fichiers ici
        logger.info('‚úÖ Fichiers temporaires nettoy√©s');
      }

      if (logs) {
        const query = 'DELETE FROM system_logs WHERE created_at < DATE_SUB(NOW(), INTERVAL 90 DAY)';
        const result = await db.query(query);
        logger.info(`‚úÖ ${result.affectedRows || 0} logs supprim√©s`);
      }

      if (audit) {
        const query = 'DELETE FROM audit_logs WHERE created_at < DATE_SUB(NOW(), INTERVAL 1 YEAR)';
        const result = await db.query(query);
        logger.info(`‚úÖ ${result.affectedRows || 0} entr√©es d\'audit supprim√©es`);
      }

      if (optimize) {
        const tables = ['users', 'books', 'loans', 'reviews', 'notifications'];
        for (const table of tables) {
          await db.query(`OPTIMIZE TABLE ${table}`);
        }
        logger.info('‚úÖ Base de donn√©es optimis√©e');
      }

      logger.info('üéâ Nettoyage manuel termin√© avec succ√®s');
      return { success: true };
    } catch (error) {
      logger.error('‚ùå Erreur lors du nettoyage manuel:', error);
      throw error;
    }
  }
}

module.exports = CleanupJobs;