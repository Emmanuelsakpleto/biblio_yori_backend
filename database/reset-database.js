#!/usr/bin/env node

/**
 * üîÑ SCRIPT DE R√âINITIALISATION RAPIDE
 * 
 * Ce script permet de vider et recr√©er rapidement la base de donn√©es
 * pour les tests et le d√©veloppement.
 */

const mysql = require('mysql2/promise');
require('dotenv').config();

const DB_CONFIG = {
  host: process.env.DB_HOST || 'localhost',
  user: process.env.DB_USER || 'root',
  password: process.env.DB_PASSWORD || '',
  database: process.env.DB_NAME || 'lectura_db',
  multipleStatements: true
};

const colors = {
  reset: '\x1b[0m',
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  cyan: '\x1b[36m'
};

function log(message, color = colors.reset) {
  console.log(`${color}${message}${colors.reset}`);
}

async function resetDatabase() {
  let connection;
  
  try {
    log('üîÑ R√âINITIALISATION DE LA BASE DE DONN√âES', colors.cyan);
    
    connection = await mysql.createConnection(DB_CONFIG);
    

    // D√©sactiver les contraintes de cl√©s √©trang√®res
    await connection.execute('SET FOREIGN_KEY_CHECKS = 0');

    // Vider les tables sans les supprimer
    const truncateQueries = [
      'TRUNCATE TABLE user_sessions',
      'TRUNCATE TABLE notifications',
      'TRUNCATE TABLE reviews',
      'TRUNCATE TABLE loans',
      'TRUNCATE TABLE books',
      'TRUNCATE TABLE users'
    ];

    for (const query of truncateQueries) {
      try {
        await connection.execute(query);
        log(`‚úÖ ${query}`, colors.green);
      } catch (err) {
        log(`‚ö†Ô∏è  ${query} : ${err.message}`, colors.yellow);
      }
    }

    // R√©activer les contraintes
    await connection.execute('SET FOREIGN_KEY_CHECKS = 1');

    log('\nüóëÔ∏è  Toutes les tables ont √©t√© vid√©es (TRUNCATE) !', colors.yellow);
    log('üí° Vous pouvez maintenant r√©ins√©rer vos donn√©es de test.', colors.cyan);
    
  } catch (error) {
    log(`‚ùå Erreur: ${error.message}`, colors.red);
  } finally {
    if (connection) {
      await connection.end();
    }
  }
}

if (require.main === module) {
  resetDatabase();
}

module.exports = { resetDatabase };
